{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search/search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","m","id","alt","name","CardList","usersM","map","Search","selfText","myChange","type","placeholder","onChange","App","myOnchange","e","setState","userField","target","value","state","fetch","then","response","json","data","this","filteredUsers","filter","fr","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGaA,EAAO,SAACC,GAEjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,EAAEC,GAAlC,qBAHL,gBAG8DC,IAAI,SACrE,mCAAML,EAAMG,EAAEG,KAAd,WCJCC,G,MAAW,SAACP,GAErB,OACI,qBAAKC,UAAU,YAAf,SAIKD,EAAMQ,OAAOC,KAAI,SAAAN,GAAC,OACf,cAAC,EAAD,CAAiBA,EAAGA,GAATA,EAAEC,WCThBM,G,MAAS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAE/B,OACI,uBACIX,UAAU,SACVY,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCwDNI,E,kDAzDZ,aAAc,IAAD,8BACX,gBAwBJC,WAAa,SAAAC,GACX,EAAKC,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,SAvBlC,EAAKC,MAAQ,CACXf,OAAQ,GACRY,UAAW,IALF,E,qDAcb,WAAoB,IAAD,OAEjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAAEX,OAAQoB,S,oBAY5C,WAAU,IAAD,EAEqBC,KAAKN,MAA1Bf,EAFA,EAEAA,OAAQY,EAFR,EAEQA,UAETU,EAAgBtB,EAAOuB,QAAO,SAAAC,GAAE,OACpCA,EAAG1B,KAAK2B,cAAcC,SAASd,EAAUa,kBAG3C,OACE,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,KAAd,8BAIA,cAAC,EAAD,CACEU,SAAS,YACTC,SAAUiB,KAAKZ,aAEjB,cAAC,EAAD,CAAUT,OAAQsB,W,GAlDRK,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5250c2a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-style.css';\r\n\r\nexport const Card = (props)=>{\r\n    let size = 'size=180x180';\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.m.id}?set=set2&${size}`} alt=\"imgs\"/>\r\n            <h1> {props.m.name} </h1>\r\n        </div>\r\n        \r\n    )\r\n}","import React from 'react'\r\nimport { Card } from '../card/card'\r\nimport './card-list.style.css'\r\n\r\nexport const CardList = (props) => {\r\n\r\n    return (\r\n        <div className='card-list'>\r\n\r\n            {/*1st {props.children} */}\r\n\r\n            {props.usersM.map(m => (\r\n                <Card key={m.id} m={m} />\r\n            )\r\n\r\n                // <h1 key={m.id}>{m.name}</h1>)\r\n            )}\r\n\r\n            {/*2nd {props.usersM.map(m =>\r\n            <h1 key={m.id}>{m.name}</h1>\r\n        )} */}\r\n\r\n            {/* {props.usersM.map(m =>\r\n            <Card key={m.id} m={m} />\r\n        )} */}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search.style.css';\r\n\r\nexport const Search = ({ selfText, myChange }) => {\r\n\r\n    return (\r\n        <input\r\n            className='search'\r\n            type='search'\r\n            placeholder={selfText}\r\n            onChange={myChange}\r\n        />\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list';\nimport { Search } from './components/search/search';\n// import { CardList } from './components/card-list/card-list';\n// import { Search } from './components/search/search';\n\nclass App extends React.Component {\n \n    constructor(){\n      super();\n\n      this.state = {\n        usersM: [],\n        userField: '',\n  \n      }\n      \n    \n      // this.myOnchange = this.myOnchange.bind(this);\n      \n    }\n\n    componentDidMount(){\n      \n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => this.setState({ usersM: data }) )\n    }\n\n  // onChange = (e) => {\n  //   this.setState({ userField: e.target.value })\n  // }\n\n  myOnchange = e => {\n    this.setState({ userField: e.target.value })\n  }\n\n\n  render() {\n   \n    const {usersM, userField} = this.state;\n\n    const filteredUsers = usersM.filter(fr =>\n      fr.name.toLowerCase().includes(userField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 className='df'>Monsters Rolodex</h1>\n\n       \n        {/* <input placeholder='search...' onChange={e=> this.setState({userField: e.target.value})} /> */}\n        <Search\n          selfText='search...'\n          myChange={this.myOnchange}\n        />\n        <CardList usersM={filteredUsers} />\n\n        {/* <button onClick={() => this.setState({ name: 'TimBro' })}>changeBy</button> */}\n      </div>\n    );\n\n  }\n}\n\n export default App;\n \n{/* <Search \n          selfText = 'for search...'\n          myChange={this.onChange }\n          // myChange={e => this.setState({ userField: e.target.value })} L30\n        /> */}\n{/* <CardList usersM= {filteredUsers} /> */ }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}